═══════════════════════════════════════════════════════════
  📋 AGREGAR AL FIRMWARE ESP32
═══════════════════════════════════════════════════════════

Abrí: firmware_arduino_ide_2/inversor_hibrido/http_client.h

Buscá la función donde armas el JSON de telemetría (sendTelemetry).

AGREGÁ este bloque DENTRO del JSON principal:

```cpp
// Agregar valores RAW de ADCs (0-3.3V reales)
doc["raw_adc"]["adc1_bat1"] = (adc_bat1 * 3.3) / 4095.0;  // GPIO34
doc["raw_adc"]["adc1_bat1_raw"] = adc_bat1;
doc["raw_adc"]["adc2_bat2"] = (adc_bat2 * 3.3) / 4095.0;  // GPIO35
doc["raw_adc"]["adc2_bat2_raw"] = adc_bat2;
doc["raw_adc"]["adc3_bat3"] = (adc_bat3 * 3.3) / 4095.0;  // GPIO32
doc["raw_adc"]["adc3_bat3_raw"] = adc_bat3;
doc["raw_adc"]["adc4_solar"] = (adc_solar * 3.3) / 4095.0;  // GPIO33
doc["raw_adc"]["adc4_solar_raw"] = adc_solar;
doc["raw_adc"]["adc5_wind"] = (adc_wind * 3.3) / 4095.0;  // GPIO36
doc["raw_adc"]["adc5_wind_raw"] = adc_wind;
doc["raw_adc"]["adc6_load"] = (adc_load * 3.3) / 4095.0;  // GPIO39
doc["raw_adc"]["adc6_load_raw"] = adc_load;
doc["raw_adc"]["adc7_ldr"] = (adc_ldr * 3.3) / 4095.0;  // GPIO25
doc["raw_adc"]["adc7_ldr_raw"] = adc_ldr;
```

IMPORTANTE:
• adc_bat1, adc_bat2, etc. son tus variables que leen analogRead()
• Cambia los nombres si usas otros en tu código
• La fórmula (valor * 3.3) / 4095.0 convierte a voltaje real

EJEMPLO COMPLETO:

```cpp
void sendTelemetry() {
  StaticJsonDocument<1024> doc;
  
  doc["device_id"] = DEVICE_ID;
  doc["timestamp"] = millis();
  
  // Tus datos existentes
  doc["voltaje_promedio"] = voltaje_promedio;
  doc["soc"] = soc;
  doc["potencia_solar"] = potencia_solar;
  // ... etc
  
  // *** AGREGAR AQUÍ ***
  doc["raw_adc"]["adc1_bat1"] = (adc_bat1 * 3.3) / 4095.0;
  doc["raw_adc"]["adc1_bat1_raw"] = adc_bat1;
  doc["raw_adc"]["adc2_bat2"] = (adc_bat2 * 3.3) / 4095.0;
  doc["raw_adc"]["adc2_bat2_raw"] = adc_bat2;
  doc["raw_adc"]["adc3_bat3"] = (adc_bat3 * 3.3) / 4095.0;
  doc["raw_adc"]["adc3_bat3_raw"] = adc_bat3;
  doc["raw_adc"]["adc4_solar"] = (adc_solar * 3.3) / 4095.0;
  doc["raw_adc"]["adc4_solar_raw"] = adc_solar;
  doc["raw_adc"]["adc5_wind"] = (adc_wind * 3.3) / 4095.0;
  doc["raw_adc"]["adc5_wind_raw"] = adc_wind;
  doc["raw_adc"]["adc6_load"] = (adc_load * 3.3) / 4095.0;
  doc["raw_adc"]["adc6_load_raw"] = adc_load;
  doc["raw_adc"]["adc7_ldr"] = (adc_ldr * 3.3) / 4095.0;
  doc["raw_adc"]["adc7_ldr_raw"] = adc_ldr;
  // *** FIN ***
  
  // Serializar y enviar
  String jsonString;
  serializeJson(doc, jsonString);
  
  http.begin(SERVER_URL + "/api/esp32/telemetry");
  http.addHeader("Content-Type", "application/json");
  int httpCode = http.POST(jsonString);
  
  if (httpCode == 200) {
    Serial.println("✅ Telemetría enviada");
  }
  
  http.end();
}
```

═══════════════════════════════════════════════════════════
  ⚡ RESULTADO:
═══════════════════════════════════════════════════════════

Después de subir el firmware verás en el dashboard:

📊 ADCs RAW (Valores Reales 0-3.3V)
┌────────────────────────────────────────┐
│ 📍 ADC1_CH6 (GPIO34) - Batería 1      │
│ 2.145V                                 │
│ ████████████████░░░░░░ 65%            │
│ ADC raw: 2654 / 4095                  │
└────────────────────────────────────────┘

Y así para los 7 ADCs en tiempo real (1 seg).

═══════════════════════════════════════════════════════════
  📝 NOTAS:
═══════════════════════════════════════════════════════════

• Los valores son REALES del ESP32, no simulados
• Van de 0.000V a 3.300V
• Se actualizan cada 1 segundo
• Incluye valor RAW (0-4095) y convertido (0-3.3V)
• Útil para debugging y calibración

DESPUÉS DE MODIFICAR EL FIRMWARE:
1. Guarda el archivo
2. Sube al ESP32
3. Ejecuta REINICIO_TOTAL.bat
4. Abre http://190.211.201.217:11113
5. Scroll a la derecha → Verás panel de ADCs RAW
